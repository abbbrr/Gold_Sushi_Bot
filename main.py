import telebot, datetime
from sets_data import sets, rest
from PIL import Image, ImageDraw, ImageFont
from telebot import types
import sqlite3
from requests.exceptions import ReadTimeout, ConnectionError
import time

TOKEN = '7058378528:AAFk9MP7hAclT34-JAz29ewI-icYntRzeqU'

sqlite_conn = sqlite3.connect('drinks.db')
sqlite_cursor = sqlite_conn.cursor()


bot = telebot.TeleBot(TOKEN)

selected_drink = {}
selected_product = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    markup = types.ReplyKeyboardMarkup(row_width=3)
    item1 = types.KeyboardButton("–ü—Ä–æ–±–∏—Ç—å –∑–∞–∫–∞–∑ üçï")
    item2 = types.KeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ üìù")
    item3 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä üì¶")
    item4 = types.KeyboardButton("–û–±—â–∏–π —Å—á–µ—Ç –∑–∞ –¥–µ–Ω—å üìà")
    item5 = types.KeyboardButton("–û–±—â–∏–π —Å—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü üóì")
    item6 = types.KeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –¥–µ–Ω—å üö´")
    markup.add(item1, item2,item3,item4, item5,item6)

    today = datetime.date.today().strftime("%d.%m.%Y")
    bot.send_message(message.chat.id, f"–°–ª—É–∂–±–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è Gold Sushiüç£\n -----–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: {today} ----- \n –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# Component
@bot.message_handler(func=lambda message: message.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥")
def handle_back(message):
    handle_start(message)


@bot.message_handler(func=lambda message: message.text == "–û–±—â–∏–π —Å—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü üóì")
def handle_total_month_sales(message):
    current_month_year = datetime.datetime.now().strftime("%B %Y")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –±–µ–ª–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    width, height = 500, 1000  # –†–∞–∑–º–µ—Ä—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    color = (255, 255, 255)  # –ë–µ–ª—ã–π —Ü–≤–µ—Ç
    image = Image.new("RGB", (width, height), color)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    draw = ImageDraw.Draw(image)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞
    font = ImageFont.truetype("Roboto-Bold.ttf", size=10)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ –∏ –≥–æ–¥–µ
    draw.text((10, 10), f"---------------------------------------------------–û—Ç—á–µ—Ç –∑–∞ {current_month_year}------------------------------------------------", fill="black", font=font)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö month.db
    conn = sqlite3.connect('month.db')
    cursor = conn.cursor()
    cursor.execute("SELECT date, earnings, costs, net_earnings FROM month_sales")
    sales_data = cursor.fetchall()
    conn.close()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ –º–µ—Å—è—Ü –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    y_position = 30
    for sale in sales_data:
        sale_text = f"{sale[0]}: –ü—Ä–∏–±—ã–ª—å: {sale[1]}, –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {sale[2]}, –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {sale[3]}"
        draw.text((10, y_position), sale_text, fill="black", font=font)
        y_position += 20

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –∑–∞ –º–µ—Å—è—Ü
    image.save("sales_month_report.png")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_photo(message.chat.id, open("sales_month_report.png", "rb"))

@bot.message_handler(commands=['clear_month'])
def handle_clear_month_data(message):
    conn = sqlite3.connect('month.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM month_sales")
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ó–∞–∫—Ä—ã—Ç—å –¥–µ–Ω—å üö´"
@bot.message_handler(func=lambda message: message.text == "–ó–∞–∫—Ä—ã—Ç—å –¥–µ–Ω—å üö´")
def close_day(message):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è –ø—Ä–æ–¥–∞–∂
    sales_conn = sqlite3.connect('sales.db')
    sales_cursor = sales_conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–¥–∞–∂
    sales_cursor.execute("SELECT COUNT(*) FROM sales")
    sales_count = sales_cursor.fetchone()[0]
    if sales_count == 0:
        bot.reply_to(message, "–ü—Ä–æ–±–µ–π—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –≤—ã —É–∂–µ –∑–∞–∫—Ä—ã–ª–∏ –¥–µ–Ω—å.")
        sales_conn.close()
        return

    total_earnings = 0
    total_costs = 0

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –∑–∞ –¥–µ–Ω—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    sales_cursor.execute("SELECT item_name, type, quantity, total_price FROM sales")
    sales = sales_cursor.fetchall()
    for sale in sales:
        item_name, type, quantity, total_price = sale
        if type == "set":
            set_info = next((s for s in sets if s["name"] == item_name), None)
            if set_info:
                total_earnings += total_price  # –£—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Ä—É—á–∫—É –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ —Å–µ—Ç–∞
                total_costs += set_info["cost_price"]  # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ—Ç–∞
        elif type == "rest":
            rest_info = next((r for r in rest if r["name"] == item_name), None)
            if rest_info:
                total_earnings += total_price  # –£—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Ä—É—á–∫—É –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                total_costs += rest_info["cost_price"]  # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        elif type == "drink":
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤
            drinks_conn = sqlite3.connect('drinks.db')
            drinks_cursor = drinks_conn.cursor()
            drinks_cursor.execute("SELECT cost FROM drinks WHERE drink=?", (item_name,))
            drink_info = drinks_cursor.fetchone()
            drinks_conn.close()

            if drink_info:
                drink_cost = drink_info[0]  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–ø–∏—Ç–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                total_costs += drink_cost * quantity  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–ø–∏—Ç–∫–∞
                total_earnings += 690 * quantity  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞–ø–∏—Ç–∫–∞
            else:
                # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–∏—Ç–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
                total_costs += quantity * 400  # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–ø–∏—Ç–∫–∞
                total_earnings += quantity * 690  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞–ø–∏—Ç–∫–∞

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ –∑–∞ –¥–µ–Ω—å
    net_earnings = total_earnings - total_costs

    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    current_date = datetime.datetime.now().strftime("%d.%m.%Y")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    sales_summary = f"{current_date}, –ü—Ä–∏–±—ã–ª—å: {total_earnings} —Ç–≥, –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_costs} —Ç–≥, –ß–∏—Å—Ç–∞—è: {net_earnings} —Ç–≥"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É month_sales
    day_summary = (current_date, total_earnings, total_costs, net_earnings)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è month_sales
    month_conn = sqlite3.connect('month.db')
    month_cursor = month_conn.cursor()
    month_cursor.execute("INSERT INTO month_sales (date, earnings, costs, net_earnings) VALUES (?, ?, ?, ?)", day_summary)
    month_conn.commit()
    month_conn.close()

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ –¥–µ–Ω—å
    sales_cursor.execute("DELETE FROM sales")
    sales_conn.commit()

    sales_conn.close()

    bot.reply_to(message, f"–î–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: \n{sales_summary}")

@bot.message_handler(func=lambda message: message.text == "–û–±—â–∏–π —Å—á–µ—Ç –∑–∞ –¥–µ–Ω—å üìà")
def handle_total_sales(message):
    total_price = 0
    total_cost = 0
    current_date = datetime.datetime.now().strftime("----------------------------%d.%m.%Y--------------------------")
    sales_text = f"{current_date}\n-----------------------–û–±—â–∏–π —á–µ–∫ –∑–∞ –¥–µ–Ω—å---------------------\n\n"

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö SQLite
    sales_conn = sqlite3.connect('sales.db')
    drinks_conn = sqlite3.connect('drinks.db')
    products_conn = sqlite3.connect('products.db')

    sales_cursor = sales_conn.cursor()
    drinks_cursor = drinks_conn.cursor()
    products_cursor = products_conn.cursor()

    sold_sets = {}
    sold_rests = {}

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    sales_cursor.execute("SELECT item_name, type, quantity FROM sales")
    sales = sales_cursor.fetchall()

    for sale in sales:
        item_name, sale_type, quantity = sale
        if sale_type == "set":
            set_info = next((s for s in sets if s["name"] == item_name), None)
            if set_info:
                # total_price += set_info["price"]
                # total_cost += set_info["cost_price"]
                total_price += set_info["price"] * quantity
                total_cost += set_info["cost_price"] * quantity
                if item_name in sold_sets:
                    sold_sets[item_name] += quantity
                else:
                    sold_sets[item_name] = quantity
                sales_text += f"{item_name} (–°–µ—Ç): {set_info['price']} —Ç–≥. (–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {set_info['cost_price']} —Ç–≥.) x{quantity}\n"
        elif sale_type == "rest":
            rest_info = next((r for r in rest if r["name"] == item_name), None)
            if rest_info:
                # total_price += rest_info["price"]
                # total_cost += rest_info["cost_price"]
                total_price += rest_info["price"] * quantity
                total_cost += rest_info["cost_price"] * quantity
                if item_name in sold_rests:
                    sold_rests[item_name] += quantity
                else:
                    sold_rests[item_name] = quantity
                sales_text += f"{item_name} (–û—Å—Ç–∞–ª—å–Ω–æ–µ): {rest_info['price']} —Ç–≥. (–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {rest_info['cost_price']} —Ç–≥.) x{quantity}\n"
        elif sale_type == "drink":
            drinks_cursor.execute("SELECT cost FROM drinks WHERE drink=?", (item_name,))
            drink_info = drinks_cursor.fetchone()
            if drink_info:
                drink_cost = drink_info[0]
                total_cost += drink_cost * quantity
                total_price += 690 * quantity
                sales_text += f"{item_name} (–ù–∞–ø–∏—Ç–æ–∫ x{quantity}): {690 * quantity} —Ç–≥.\n"
            else:
                total_cost += 500 * quantity
                total_price += 690 * quantity
                sales_text += f"{item_name} (–ù–∞–ø–∏—Ç–æ–∫ x{quantity}): {690 * quantity} —Ç–≥.\n"
        elif sale_type == "product":
            products_cursor.execute("SELECT cost FROM products WHERE product=?", (item_name,))
            product_info = products_cursor.fetchone()
            if product_info:
                product_cost = product_info[0]
                total_cost += product_cost * quantity
                total_price += 500 * quantity  # –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                sales_text += f"{item_name} (–ü—Ä–æ–¥—É–∫—Ç x{quantity}): {500 * quantity} —Ç–≥.\n"

    sales_conn.close()
    drinks_conn.close()
    products_conn.close()

    profit = total_price - total_cost
    sales_text += f"-----------------------------------------------------------\n"
    sales_text += f"–û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {total_price} —Ç–≥.\n"
    sales_text += f"–û–±—â–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {total_cost} —Ç–≥.\n"
    sales_text += f"–ü—Ä–∏–±—ã–ª—å: {profit} —Ç–≥.\n"

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–π –±–µ–ª–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    width, height = 500, 1000  # –†–∞–∑–º–µ—Ä—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    color = (255, 255, 255)  # –ë–µ–ª—ã–π —Ü–≤–µ—Ç
    image = Image.new("RGB", (width, height), color)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    draw = ImageDraw.Draw(image)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞
    font = ImageFont.truetype("Roboto-Bold.ttf", size=15)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    draw.text((10, 10), sales_text, fill="black", font=font)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
    image.save("sales_report.png")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_photo(message.chat.id, open("sales_report.png", "rb"))

# –ü—Ä–æ–±–∏—Ç–∏–µ –∑–∞–∫–∞–∑–æ–≤
@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–±–∏—Ç—å –∑–∞–∫–∞–∑ üçï")
def punch_order_product(message):
    markup = types.ReplyKeyboardMarkup(row_width=3)
    item1 = types.KeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥")
    item2 = types.KeyboardButton("–ë–∞—Ä ‚òïÔ∏è")
    item3 = types.KeyboardButton("–ö—É—Ö–Ω—è üçî")
    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–±–∏—Ç–∏–µ –∑–∞–∫–∞–∑–∞:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "–ö—É—Ö–Ω—è üçî")
def handle_order_category(message):
    markup = types.ReplyKeyboardMarkup(row_width=3)

    item1 = types.KeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥")
    item2 = types.KeyboardButton("–°–µ—Ç—ãÔ∏è üç±")
    item3 = types.KeyboardButton("–û—Å—Ç–∞–ª—å–Ω–æ–µ üçü")
    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–°–µ—Ç—ãÔ∏è üç±")
def handle_sets_category(message):
    category = message.text

    markup = types.InlineKeyboardMarkup(row_width=1)

    for set_data in sets:
        button_text = f"{set_data['name']} - {set_data['price']} —Ç–≥"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f"quantity_{set_data['name']}"))

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–û—Å—Ç–∞–ª—å–Ω–æ–µ üçü")
def handle_sets_category(message):
    category = message.text

    markup = types.InlineKeyboardMarkup(row_width=1)

    for rest_data in rest:
        button_text = f"{rest_data['name']} - {rest_data['price']} —Ç–≥"
        markup.add(types.InlineKeyboardButton(button_text, callback_data=f"quantity_{rest_data['name']}"))

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in ["–ë–∞—Ä ‚òïÔ∏è"])
def handle_order_category(message):
    category = message.text

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤
    drinks_conn = sqlite3.connect('drinks.db')
    drinks_cursor = drinks_conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–∏—Ç–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã drinks
    drinks_cursor.execute("SELECT drink FROM drinks")
    drinks = drinks_cursor.fetchall()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    markup = types.InlineKeyboardMarkup(row_width=2)
    for drink in drinks:
        # drink - —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç (–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞)
        markup.add(types.InlineKeyboardButton(drink[0], callback_data=f"quantity_{drink[0]}"))

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤
    drinks_conn.close()

    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("quantity_"))
def handle_quantity(call):
    item_name = call.data.split("_")[1]

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤
    drinks_conn = sqlite3.connect('drinks.db')
    drinks_cursor = drinks_conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–ø–∏—Ç–∫–æ–º
    drinks_cursor.execute("SELECT * FROM drinks WHERE drink=?", (item_name,))
    existing_drink = drinks_cursor.fetchone()

    if existing_drink:
        bot.send_message(call.message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {item_name} –≤ —Ü–∏—Ñ—Ä–∞—Ö:")
        bot.register_next_step_handler(call.message, lambda message: update_quantity(message, item_name, is_drink=True))
        drinks_conn.close()
        return

    drinks_conn.close()

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    products_conn = sqlite3.connect('products.db')
    products_cursor = products_conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–º
    products_cursor.execute("SELECT * FROM products WHERE product=?", (item_name,))
    existing_product = products_cursor.fetchone()

    if existing_product:
        bot.send_message(call.message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {item_name} –≤ —Ü–∏—Ñ—Ä–∞—Ö:")
        bot.register_next_step_handler(call.message,
                                       lambda message: update_quantity(message, item_name, is_drink=False))
        products_conn.close()
        return

    products_conn.close()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ç–∞
    selected_set = next((s for s in sets if s["name"] == item_name), None)
    if selected_set:
        bot.send_message(call.message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {item_name} –≤ —Ü–∏—Ñ—Ä–∞—Ö:")
        bot.register_next_step_handler(call.message, lambda message: update_quantity(message, item_name, is_set=True))
        return

    selected_rest = next((r for r in rest if r["name"] == item_name), None)
    if selected_rest:
        bot.send_message(call.message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {item_name} –≤ —Ü–∏—Ñ—Ä–∞—Ö:")
        bot.register_next_step_handler(call.message, lambda message: update_quantity(message, item_name, is_rest = True))

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–ø–∏—Ç–∫–æ–º, –ø—Ä–æ–¥—É–∫—Ç–æ–º –∏–ª–∏ —Å–µ—Ç–æ–º, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
    bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


def update_quantity(message, item_name, is_drink=False, is_set=False, is_rest=False):
    try:
        quantity = int(message.text)
        if is_drink:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤
            drinks_conn = sqlite3.connect('drinks.db')
            drinks_cursor = drinks_conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –Ω–∞–ø–∏—Ç–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            drinks_cursor.execute("SELECT quantity, cost FROM drinks WHERE drink=?", (item_name,))
            drink = drinks_cursor.fetchone()
            if drink:
                current_quantity, unit_price = drink
                if current_quantity >= quantity:
                    new_quantity = current_quantity - quantity
                    drinks_cursor.execute("UPDATE drinks SET quantity=? WHERE drink=?", (new_quantity, item_name))

                    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Ü–µ–Ω—ã
                    total_price = quantity * unit_price

                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–¥–∞–∂–µ –≤ —Ç–∞–±–ª–∏—Ü—É "sales"
                    sales_conn = sqlite3.connect('sales.db')
                    sales_cursor = sales_conn.cursor()
                    sales_cursor.execute("INSERT INTO sales (item_name, type, quantity, total_price) VALUES (?, ?, ?, ?)",
                                         (item_name, "drink", quantity, total_price))
                    sales_conn.commit()
                    sales_conn.close()

                    drinks_conn.commit()
                    bot.send_message(message.chat.id, f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–Ω—è—Ç–æ {quantity} '{item_name}'.")
                    handle_start(message)
                else:
                    bot.send_message(message.chat.id,
                                     f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ '{item_name}'. –î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current_quantity}.")
            else:
                bot.send_message(message.chat.id, f"–ù–∞–ø–∏—Ç–æ–∫ '{item_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

            drinks_conn.close()

        elif is_set:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–µ—Ç–∞
            selected_set = next((s for s in sets if s["name"] == item_name), None)
            if selected_set:
                enough_products = True
                missing_product = None
                for ingredient in selected_set["ingredients"]:
                    if ingredient["type"] == "product":
                        products_conn = sqlite3.connect('products.db')
                        products_cursor = products_conn.cursor()
                        products_cursor.execute("SELECT quantity FROM products WHERE product=?", (ingredient["name"],))
                        existing_product = products_cursor.fetchone()
                        if not existing_product or existing_product[0] < ingredient["quantity"] * quantity:
                            enough_products = False
                            missing_product = ingredient["name"]
                            break
                        products_conn.close()
                    elif ingredient["type"] == "drink":
                        drinks_conn = sqlite3.connect('drinks.db')
                        drinks_cursor = drinks_conn.cursor()
                        drinks_cursor.execute("SELECT quantity FROM drinks WHERE drink=?", (ingredient["name"],))
                        existing_drink = drinks_cursor.fetchone()
                        if not existing_drink or existing_drink[0] < ingredient["quantity"] * quantity:
                            enough_products = False
                            missing_product = ingredient["name"]
                            break
                        drinks_conn.close()

                if enough_products:
                    total_set_price = selected_set["price"] * quantity
                    for ingredient in selected_set["ingredients"]:
                        if ingredient["type"] == "drink":
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞
                            drinks_conn = sqlite3.connect('drinks.db')
                            drinks_cursor = drinks_conn.cursor()
                            drinks_cursor.execute("UPDATE drinks SET quantity=quantity-? WHERE drink=?",
                                                  (ingredient["quantity"] * quantity, ingredient["name"]))
                            drinks_conn.commit()
                            drinks_conn.close()
                        elif ingredient["type"] == "product":
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                            products_conn = sqlite3.connect('products.db')
                            products_cursor = products_conn.cursor()
                            products_cursor.execute("UPDATE products SET quantity=quantity-? WHERE product=?",
                                                    (ingredient["quantity"] * quantity, ingredient["name"]))
                            products_conn.commit()
                            products_conn.close()

                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–¥–∞–∂–µ —Å–µ—Ç–∞
                    sales_conn = sqlite3.connect('sales.db')
                    sales_cursor = sales_conn.cursor()
                    sales_cursor.execute("INSERT INTO sales (item_name, type, quantity, total_price) VALUES (?, ?, ?, ?)",
                                         (selected_set["name"], "set", quantity, total_set_price))
                    sales_conn.commit()
                    sales_conn.close()

                    bot.send_message(message.chat.id,
                                     f"–ó–∞–∫–∞–∑ –Ω–∞ —Å–µ—Ç '{selected_set['name']}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–±–∏—Ç. –¶–µ–Ω–∞: {total_set_price} —Ç–≥.")
                    handle_start(message)
                else:
                    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∞
                    bot.send_message(message.chat.id,
                                     f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ '{missing_product}' –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∞ '{selected_set['name']}'.")
            else:
                bot.send_message(message.chat.id, f"–°–µ—Ç '{item_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

        elif is_rest:
            selected_rest = next((r for r in rest if r["name"] == item_name), None)
            if selected_rest:
                enough_products = True
                missing_product = None
                for ingredient in selected_rest["ingredients"]:
                    if ingredient["type"] == "product":
                        products_conn = sqlite3.connect('products.db')
                        products_cursor = products_conn.cursor()
                        products_cursor.execute("SELECT quantity FROM products WHERE product=?", (ingredient["name"],))
                        existing_product = products_cursor.fetchone()
                        if not existing_product or existing_product[0] < ingredient["quantity"] * quantity:
                            enough_products = False
                            missing_product = ingredient["name"]
                            break
                        products_conn.close()

                if enough_products:
                    total_set_price = selected_rest["price"] * quantity
                    for ingredient in selected_rest["ingredients"]:
                        if  ingredient["type"] == "product":
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
                            products_conn = sqlite3.connect('products.db')
                            products_cursor = products_conn.cursor()
                            products_cursor.execute("UPDATE products SET quantity=quantity-? WHERE product=?",
                                                    (ingredient["quantity"] * quantity, ingredient["name"]))
                            products_conn.commit()
                            products_conn.close()


                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–¥–∞–∂–µ —Å–µ—Ç–∞
                    sales_conn = sqlite3.connect('sales.db')
                    sales_cursor = sales_conn.cursor()
                    sales_cursor.execute(
                        "INSERT INTO sales (item_name, type, quantity, total_price) VALUES (?, ?, ?, ?)",
                        (selected_rest["name"], "rest", quantity, total_set_price))
                    sales_conn.commit()
                    sales_conn.close()

                    bot.send_message(message.chat.id,
                                     f"–ó–∞–∫–∞–∑ –Ω–∞ —Å–µ—Ç '{selected_rest['name']}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–±–∏—Ç. –¶–µ–Ω–∞: {total_set_price} —Ç–≥.")
                    handle_start(message)
                else:
                    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∞
                    bot.send_message(message.chat.id,
                                     f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ '{missing_product}' –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∞ '{selected_rest['name']}'.")
            else:
                bot.send_message(message.chat.id, f"–°–µ—Ç '{item_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


        else:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            products_conn = sqlite3.connect('products.db')
            products_cursor = products_conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            products_cursor.execute("SELECT quantity FROM products WHERE product=?", (item_name,))
            product = products_cursor.fetchone()
            if product:
                current_quantity = product[0]
                new_quantity = current_quantity - quantity
                products_cursor.execute("UPDATE products SET quantity=? WHERE product=?", (new_quantity, item_name))

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–¥–∞–∂–µ –≤ —Ç–∞–±–ª–∏—Ü—É "sales"
                sales_conn = sqlite3.connect('sales.db')
                sales_cursor = sales_conn.cursor()
                sales_cursor.execute("INSERT INTO sales (item_name, type, quantity) VALUES (?, ?, ?)",
                                     (item_name, "product", quantity))
                sales_conn.commit()
                sales_conn.close()

                products_conn.commit()
                bot.send_message(message.chat.id, f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–Ω—è—Ç–æ {quantity} '{item_name}'.")
                handle_start(message)
            else:
                bot.send_message(message.chat.id, f"–ü—Ä–æ–¥—É–∫—Ç '{item_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

            products_conn.close()

    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"
@bot.message_handler(func=lambda message: message.text == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ üìù")
def handle_products_quantity(message):
    response = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:\n"

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤
    drinks_conn = sqlite3.connect('drinks.db')
    drinks_cursor = drinks_conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–∏—Ç–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã drinks
    drinks_cursor.execute("SELECT drink, quantity FROM drinks")
    drinks = drinks_cursor.fetchall()

    response += "----------------------------------------------\n–ù–∞–ø–∏—Ç–∫–∏üßä:\n"
    for drink in drinks:
        response += f"{drink[0]}: {drink[1]}\n"

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤
    drinks_conn.close()

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    products_conn = sqlite3.connect('products.db')
    products_cursor = products_conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã products
    products_cursor.execute("SELECT product, quantity FROM products")
    products = products_cursor.fetchall()

    response += "----------------------------------------------\n–ü—Ä–æ–¥—É–∫—Ç—ãüçû:\n"
    for product in products:
        response += f"{product[0]}: {product[1]}–≥—Ä.\n"

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    products_conn.close()

    bot.send_message(message.chat.id, response)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
@bot.message_handler(func=lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä üì¶")
def handle_add_product(message):
    markup = types.ReplyKeyboardMarkup(row_width=3)
    item1 = types.KeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥")
    item2 = types.KeyboardButton("–ù–∞–ø–∏—Ç–∫–∏ üßä")
    item3 = types.KeyboardButton("–ü—Ä–æ–¥—É–∫—Ç—ã üçû")
    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–∏—Ç–∫–∏ üßä"
@bot.message_handler(func=lambda message: message.text == "–ù–∞–ø–∏—Ç–∫–∏ üßä")
def handle_drinks(message):
    markup = types.ReplyKeyboardMarkup(row_width=3)
    item1 = types.KeyboardButton("Sprite")
    item2 = types.KeyboardButton("Fanta")
    item3 = types.KeyboardButton("Gorilla")
    item4 = types.KeyboardButton("Cola")
    item5 = types.KeyboardButton("Piala")
    item6 = types.KeyboardButton("Fuse Tea")
    markup.add(item1, item2, item3, item4, item5, item6)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥—É–∫—Ç—ã üçû"
@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–¥—É–∫—Ç—ã üçû")
def handle_products(message):
    markup = types.ReplyKeyboardMarkup(row_width=5)
    item1 = types.KeyboardButton("–†–∏—Å")
    item2 = types.KeyboardButton("–ù–æ—Ä–∏")
    item3 = types.KeyboardButton("–õ–∞—Å–æ—Å—å")
    item4 = types.KeyboardButton("–¢–≤–æ—Ä –°—ã—Ä")
    item5 = types.KeyboardButton("–£–≥–æ—Ä—å")
    item6 = types.KeyboardButton("–û–≥—É—Ä—Ü—ã")
    item7 = types.KeyboardButton("–õ–∏—Å—Ç—å—è –°–∞–ª–∞—Ç")
    item8 = types.KeyboardButton("–ú–∞–π–æ–Ω–µ–∑")
    item9 = types.KeyboardButton("–ö—É—Ä–∏—Ü–∞")
    item10 = types.KeyboardButton("–°–Ω–µ–∂ –ö—Ä–∞–±")
    item11 = types.KeyboardButton("–ü–ª–∞–≤–ª–µ–Ω–Ω—ã–π –°—ã—Ä")
    item12 = types.KeyboardButton("–ö—É–Ω–∂—É—Ç")
    item13 = types.KeyboardButton("–°–ø–∞–π—Å–∏")
    item14 = types.KeyboardButton("–°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞")
    item15 = types.KeyboardButton("–£–Ω–∞–≥–∏ –°–æ—É—Å")
    item16 = types.KeyboardButton("–ú–∞—Å–∞–≥–æ")
    item17 = types.KeyboardButton("–ö—Ä—ã–ª—ã—à–∫–∏")
    item18 = types.KeyboardButton("–§—Ä–∏")
    item19 = types.KeyboardButton("–¢–µ—Å—Ç–æ")
    item20 = types.KeyboardButton("–°—ã—Ä")
    item21 = types.KeyboardButton("–ü–∏—Ü—Ü–∞ —Å–æ—É—Å")
    item22 = types.KeyboardButton("–¢–æ–º–∞—Ç–æ")
    item23 = types.KeyboardButton("–ö–æ–ª–±–∞—Å–∞")
    item24 = types.KeyboardButton("–ö—É—Ä–∏—Ü–∞")
    item25 = types.KeyboardButton("–ì—Ä–∏–±—ã")
    item26 = types.KeyboardButton("–ö—Ä–∞–±")
    markup.add(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,item13, item14, item15, item16, item17, item18,item19,item20,item21,item22,item23, item24, item25,item26)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–∞
@bot.message_handler(func=lambda message: message.text in ["Sprite", "Fanta", "Gorilla", "Cola", "Piala", "Fuse Tea"])
def handle_selected_drink(message):
    drink_name = message.text
    user_id = message.chat.id

    selected_drink[user_id] = {"drink_name": drink_name}
    bot.send_message(message.chat.id, f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {drink_name} –≤ —Ü–∏—Ñ—Ä–∞—Ö:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
@bot.message_handler(func=lambda message: message.text in ["–†–∏—Å", "–ù–æ—Ä–∏", "–õ–∞—Å–æ—Å—å", "–¢–≤–æ—Ä –°—ã—Ä", "–£–≥–æ—Ä—å", "–û–≥—É—Ä—Ü—ã", "–õ–∏—Å—Ç—å—è –°–∞–ª–∞—Ç", "–ú–∞–π–æ–Ω–µ–∑", "–ö—É—Ä–∏—Ü–∞", "–°–Ω–µ–∂ –ö—Ä–∞–±", "–ü–ª–∞–≤–ª–µ–Ω–Ω—ã–π –°—ã—Ä", "–ö—É–Ω–∂—É—Ç", "–°–ø–∞–π—Å–∏", "–°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞", "–£–Ω–∞–≥–∏ –°–æ—É—Å", "–ú–∞—Å–∞–≥–æ", "–ö—Ä—ã–ª—ã—à–∫–∏", "–§—Ä–∏", "–¢–µ—Å—Ç–æ", "–°—ã—Ä", "–ü–∏—Ü—Ü–∞ —Å–æ—É—Å", "–¢–æ–º–∞—Ç–æ", "–ö–æ–ª–±–∞—Å–∞","–ö—É—Ä–∏—Ü–∞", "–ì—Ä–∏–±—ã","–ö—Ä–∞–±"])
def handle_selected_product(message):
    user_id = message.chat.id
    product_name = message.text

    selected_product[user_id] = {"product_name": product_name}
    bot.send_message(user_id, f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {product_name} –≤ –≥—Ä–∞–º–º–∞—Ö:")
    bot.register_next_step_handler(message, handle_product_quantity)

def handle_product_quantity(message):
    user_id = message.chat.id
    product_name = selected_product[user_id]["product_name"]
    quantity_grams = message.text

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    try:
        quantity_grams = float(quantity_grams)
    except ValueError:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        return

    # bot.send_message(user_id, f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {product_name}: {quantity_grams} –≥—Ä.")
    sqlite_conn = sqlite3.connect('products.db')
    sqlite_cursor = sqlite_conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    sqlite_cursor.execute("SELECT * FROM products WHERE user_id=? AND product=?", (user_id, product_name))
    existing_product = sqlite_cursor.fetchone()

    if existing_product:
        # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        new_quantity = existing_product[2] + quantity_grams  # 2 - —ç—Ç–æ –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ quantity
        sqlite_cursor.execute("UPDATE products SET quantity=? WHERE user_id=? AND product=?",
                              (new_quantity, user_id, product_name))
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        sqlite_cursor.execute("INSERT INTO products (user_id, product, quantity) VALUES (?, ?, ?)",
                              (user_id, product_name, quantity_grams))

    # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
    del selected_product[user_id]

    bot.send_message(user_id, f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {product_name}: {quantity_grams} –≥—Ä.")
    handle_start(message)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
    sqlite_conn.commit()
    sqlite_conn.close()
    handle_start(message)

@bot.message_handler(commands=['clear_all_products'])
def clear_all_drinks(message):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    sqlite_conn = sqlite3.connect('products.db')
    sqlite_cursor = sqlite_conn.cursor()

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã drinks
    sqlite_cursor.execute("DELETE FROM products")
    sqlite_conn.commit()
    sqlite_conn.close()

    bot.send_message(message.chat.id, "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø–∏—Ç–∫–∞
@bot.message_handler(func=lambda message: message.chat.id in selected_drink and message.text.isdigit())
def handle_drink_quantity(message):
    user_id = message.chat.id
    drink_name = selected_drink[user_id]["drink_name"]
    quantity = message.text

    bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–ø–∏—Ç–∫–∞:")
    bot.register_next_step_handler(message, lambda m: save_drink_data(user_id, drink_name, quantity, m.text, message))

def save_drink_data(user_id, drink_name, quantity, cost, message):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    try:
        quantity = int(quantity)
        cost = float(cost)
    except ValueError:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    sqlite_conn = sqlite3.connect('drinks.db')
    sqlite_cursor = sqlite_conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –Ω–∞–ø–∏—Ç–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    sqlite_cursor.execute("SELECT * FROM drinks WHERE user_id=? AND drink=?", (user_id, drink_name))
    existing_drink = sqlite_cursor.fetchone()

    if existing_drink:
        # –ï—Å–ª–∏ –Ω–∞–ø–∏—Ç–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        new_quantity = existing_drink[3] + quantity  # 3 - —ç—Ç–æ –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ quantity
        sqlite_cursor.execute("UPDATE drinks SET quantity=? WHERE user_id=? AND drink=?",
                              (new_quantity, user_id, drink_name))
        sqlite_conn.commit()
        bot.send_message(user_id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {drink_name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_quantity} —à—Ç.")
    else:
        # –ï—Å–ª–∏ –Ω–∞–ø–∏—Ç–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        sqlite_cursor.execute("INSERT INTO drinks (user_id, drink, quantity, cost) VALUES (?, ?, ?, ?)",
                              (user_id, drink_name, quantity, cost))
        sqlite_conn.commit()
        bot.send_message(user_id, f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {drink_name}: {quantity} —à—Ç., —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost} —Ç–≥.")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
    sqlite_conn.close()
    handle_start(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_all_drinks
@bot.message_handler(commands=['clear_all_drinks'])
def clear_all_drinks(message):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    sqlite_conn = sqlite3.connect('drinks.db')
    sqlite_cursor = sqlite_conn.cursor()

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã drinks
    sqlite_cursor.execute("DELETE FROM drinks")
    sqlite_conn.commit()
    sqlite_conn.close()

    bot.send_message(message.chat.id, "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞–ø–∏—Ç–∫–∞—Ö –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def start_bot():
    while True:
        try:
            bot.polling(timeout=60, long_polling_timeout=60)
        except ReadTimeout:
            print("Read timeout occurred, retrying...")
            time.sleep(15)  # Wait before retrying
        except ConnectionError:
            print("Connection error occurred, retrying...")
            time.sleep(15)  # Wait before retrying
        except Exception as e:
            print(f"An unexpected error occurred: {e}")
            time.sleep(15)  # Wait before retrying

if __name__ == '__main__':
    start_bot()